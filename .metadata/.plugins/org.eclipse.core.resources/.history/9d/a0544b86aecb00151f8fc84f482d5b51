package com.mymusic.cocomusic;

import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import com.mymusic.cocomusic.util.MediaUtils;
import com.mymusic.cocomusic.vo.Mp3Info;

import android.app.Service;
import android.content.Intent;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Binder;
import android.os.IBinder;
/*
 * 音乐播放的服务组件
 * 实现功能
 * 1.播放
 * 2.暂停
 * 3.上一首
 * 4.下一首
 * 5.获取当前的播放进度
 */
public class PlayService extends Service{
	private MediaPlayer mPlayer;
	private int currentPosition;//当前正在播放的位置
	private ArrayList<Mp3Info> mp3Infos; 
	private MusicUpdateListener musicUpdateListener;

	private ExecutorService es = Executors.newSingleThreadExecutor();
	public PlayService(){
		
	}
	class PlayerBinder extends Binder{
		public PlayService getPlayerService(){
			return PlayService.this;
		};
	}
	@Override
	public IBinder onBind(Intent intent) {
		return new PlayerBinder();
	}
	@Override
	public void onCreate() {
		super.onCreate();
		mPlayer = new MediaPlayer();
		mp3Infos = MediaUtils.getMp3Infos(this);
		es.execute(updateStatusRunnable);
	}
	public void onDestroy() {
		super.onDestroy();
		if(es!=null&&!es.isShutdown()){
			es.shutdown();
			es =null;
		}
	};
	Runnable updateStatusRunnable = new Runnable() {
		
		@Override
		public void run() {

			while(true){
				if(musicUpdateListener!=null){
					musicUpdateListener.onPublish(getCurrentProgress());
				}
			}
		}
	};
	
	public void play(int position){
		if(position>=0&&position<mp3Infos.size()){
		  Mp3Info mp3Info = mp3Infos.get(position);
		  try {
			  mPlayer.reset();
			  mPlayer.setDataSource(this, Uri.parse(mp3Info.getUrl()));
			  mPlayer.prepare();
			  mPlayer.start();
			  currentPosition = position;
		  } catch (IOException e) {
			e.printStackTrace();
		  }
		  if(musicUpdateListener!=null){
			  musicUpdateListener.onChange(currentPosition);
		  }
		}
	}
	public boolean isPlaying(){
		if(mPlayer!=null){
			return mPlayer.isPlaying();
		}
		return false;
	}
	public void pause(){
		if(mPlayer.isPlaying()){
			mPlayer.pause();
		}
	}
	public void next(){
		if(currentPosition+1>mp3Infos.size()-1){
			currentPosition=0;
		}else{
			currentPosition++;
		}
		play(currentPosition);
	}
	public void prev(){
		if(currentPosition-1<0){
			currentPosition=mp3Infos.size()-1;
		}else{
			currentPosition--;
		}
		play(currentPosition);
	}
	public void start(){
		if(mPlayer!=null&&mPlayer.isPlaying()){
			mPlayer.start();
		}
	}
	public int getCurrentProgress(){
		if(mPlayer!=null&&mPlayer.isPlaying()){
			return mPlayer.getCurrentPosition();
		}
		return 0;
	}
	public int getDuration(){
		return mPlayer.getDuration();
		
	}
	public void seekTo(int msec){
		mPlayer.seekTo(msec);
	}
	//更新状态的接口
	public interface MusicUpdateListener{
		public void onPublish(int progress);
		public void onChange(int position);
	}
	public void setMusicUpdateListener(MusicUpdateListener musicUpdateListener) {
		this.musicUpdateListener = musicUpdateListener;
	}
	

}
