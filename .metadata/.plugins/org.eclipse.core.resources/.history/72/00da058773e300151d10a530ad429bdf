package com.mymusic.cocomusic;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.IBinder;
import android.support.v4.app.FragmentActivity;

/*
 * 主要进行绑定服务，方便给其他activity继承来调用PlayService里的方法，例如：播放暂停等等
 */
public abstract class BaseActivity extends FragmentActivity {
	protected PlayService playService;
	private ExecutorService es = Executors.newSingleThreadExecutor();
    boolean isBound = false;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
	}
	private ServiceConnection conn = new ServiceConnection() {
		
		@Override
		public void onServiceDisconnected(ComponentName name) {
			playService = null;
			isBound=false;
			
			
		}
		Runnable updateStatusRunnable = new Runnable() {
			
			@Override
			public void run() {

				while(true){
					if(musicUpdateListener!=null){
						musicUpdateListener.onPublish(playService.getCurrentProgress());
					
					try {
						Thread.sleep(500);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}}
				}
			}
		};
	/*
	 * 设计模式之观察者模式
	 * 具体观察者：PlayActivity与MainActivity
	 * 抽象观察者：BaseActivity的musicUpdateListener
	 * 具体主题：PlayService
	 * 抽象主题：playService的musicUpdateListener
	 * 	
	 */
		@Override
		public void onServiceConnected(ComponentName name, IBinder service) {
			PlayService.PlayerBinder binder = (PlayService.PlayerBinder) service;
			playService = binder.getPlayerService();
			playService.setMusicUpdateListener(musicUpdateListener);
			musicUpdateListener.onChange(playService.getCurrentPosition());
			es.execute(updateStatusRunnable);
		}
	};
	/*
	 * 设计模式之模板方法模式：
	 * 先在父类定义好，具体的话就延迟到子类实现
	 * 所以先在父类写好抽象方法
	 * 
	 */
	private PlayService.MusicUpdateListener musicUpdateListener = new PlayService.MusicUpdateListener() {
		
		@Override
		public void onPublish(int progress) {
			publish(progress);
		}
		
		@Override
		public void onChange(int position) {
			change(position);
		}
	};
	public abstract void publish(int progress);
	public abstract void change(int position);
	//绑定服务
	public void bindPlayService(){
		if(!isBound){
		   Intent intent = new Intent(this,PlayService.class);
		   bindService(intent,conn,Context.BIND_AUTO_CREATE);
		   isBound=true;
		}
	}
    //接触绑定服务
	public void unbindPlayService(){
		if(isBound){
		  unbindService(conn);
		  isBound=false;
		}
	}
	

}
